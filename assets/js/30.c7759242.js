(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{509:function(t,s,e){"use strict";e.r(s);var a=e(4),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"理解hooks怎么运行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#理解hooks怎么运行"}},[t._v("#")]),t._v(" 理解hooks怎么运行")]),t._v(" "),e("h3",{attrs:{id:"hooks的原则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hooks的原则"}},[t._v("#")]),t._v(" hooks的原则")]),t._v(" "),e("p",[t._v("react团队在怎么使用hooks的 "),e("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//reactjs.org/docs/hooks-rules.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),e("OutboundLink")],1),t._v(" 中，强调了两点主要的使用原则：")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("不要")]),t._v(" 在 循环、条件语句或者嵌套函数中调用hooks")]),t._v(" "),e("li",[t._v("只能在 "),e("code",[t._v("React")]),t._v(" 函数组件中调用hooks")])]),t._v(" "),e("p",[t._v("第二点是显而易见的。为了给 "),e("strong",[t._v("函数组件")]),t._v(" 增加一些能力(比如 "),e("code",[t._v("state")]),t._v("，类声明周期方法)，需要通过一种方式，来把这种能力赋给函数组件，这种方式就是使用hooks。")]),t._v(" "),e("p",[t._v("然而，第一点规则，很容易让人感到困惑。")]),t._v(" "),e("h3",{attrs:{id:"hooks中的state管理-只是在操作数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hooks中的state管理-只是在操作数组"}},[t._v("#")]),t._v(" hooks中的state管理，只是在操作数组")]),t._v(" "),e("p",[t._v("为了更加清晰的理解hooks，让我们来看看怎么简单实现hooks API。")]),t._v(" "),e("p",[e("strong",[t._v("请注意，下面代码只是一个demo，是为了让我们理解hooks大概是怎么运作的。这不是 React 中的真正内部实现。")])]),t._v(" "),e("h3",{attrs:{id:"怎么实现-usestate-呢"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#怎么实现-usestate-呢"}},[t._v("#")]),t._v(" 怎么实现 useState 呢？")]),t._v(" "),e("p",[t._v("让我们通过一个例子来演示，"),e("code",[t._v("useState")]),t._v("内部大概是怎么运作的。")]),t._v(" "),e("p",[t._v("组件代码如下：")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("RenderFunctionComponent")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("firstName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" setFirstName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("useState")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Rudi"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("lastName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" setLastName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("useState")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Yardley"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Button onClick"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setFirstName")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Fred"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("Fred"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("Button"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br")])]),e("p",[e("code",[t._v("useState")]),t._v(" 实现的功能是，你能通过这个hook返回的 "),e("strong",[t._v("数组")]),t._v(" 中第二个元素，作为修改这个state的一个setter方法。")]),t._v(" "),e("h3",{attrs:{id:"那么-react可能会怎么来实现-usestate-呢"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#那么-react可能会怎么来实现-usestate-呢"}},[t._v("#")]),t._v(" 那么，React可能会怎么来实现 useState 呢？")]),t._v(" "),e("p",[t._v("让我们来想想react内部会怎么来实现 "),e("code",[t._v("useState")]),t._v(" 呢。在下面的实现里，"),e("code",[t._v("state")]),t._v(" 是存放在被render的组件外面，并且这个"),e("code",[t._v("state")]),t._v("不会和其他组件共享，同时，在这个组件后续render中，能够通过特定的作用域方式，访问到这个"),e("code",[t._v("state")]),t._v("。")]),t._v(" "),e("p",[e("strong",[t._v("1) state初始化")])]),t._v(" "),e("p",[t._v("创建两个空数组，分别用来存放 "),e("code",[t._v("setters")]),t._v(" 和 "),e("code",[t._v("state")]),t._v("，将 "),e("strong",[t._v("指针")]),t._v(" 指到 "),e("code",[t._v("0")]),t._v(" 的位置：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://pic1.zhimg.com/v2-0912a7e2bc8ee3fe1fead94595033288_r.jpg",alt:"img"}})]),t._v(" "),e("p",[e("strong",[t._v("2) 组件首次render")])]),t._v(" "),e("p",[t._v("当首次render这个函数组件的时候。")]),t._v(" "),e("p",[t._v("每一个 "),e("code",[t._v("useState")]),t._v(" 调用，当 "),e("strong",[t._v("首次")]),t._v(" 执行的时候，在 "),e("code",[t._v("setter")]),t._v(" 数组里加入一个 "),e("code",[t._v("setter")]),t._v(" 函数(和对应的数组index关联)；然后，将 "),e("code",[t._v("state")]),t._v(" 加入对应的 "),e("code",[t._v("state")]),t._v(" 数组里：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://pic4.zhimg.com/v2-b49d44c2adbe48ec6f6fe44de917549f_r.jpg",alt:"img"}})]),t._v(" "),e("p",[e("strong",[t._v("3) 组件后续(非首次)render")])]),t._v(" "),e("p",[t._v("后续组件的每次render，指针都会重置为 0 ，每调用一次 "),e("code",[t._v("useState")]),t._v("，都会返回指针对应的两个数组里的 "),e("code",[t._v("state")]),t._v(" 和 "),e("code",[t._v("setter")]),t._v("，然后将指针位置 "),e("code",[t._v("+1")]),t._v("。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://pic2.zhimg.com/v2-d67e04ce2a194902b249b2cfd980eaf9_r.jpg",alt:"img"}})]),t._v(" "),e("p",[e("strong",[t._v("4)setter调用处理")])]),t._v(" "),e("p",[t._v("每一个 "),e("code",[t._v("setter")]),t._v(" 函数，都关联了对应的指针位置。当调用某个 "),e("code",[t._v("setter")]),t._v(" 函数式，就可以通过这个函数所关联的指针，找到对应的 "),e("code",[t._v("state")]),t._v("，修改"),e("code",[t._v("state")]),t._v("数组里对应位置的值：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://pic3.zhimg.com/v2-f26a484e763b5d90408e7a88b0af7dc2_r.jpg",alt:"img"}})]),t._v(" "),e("h3",{attrs:{id:"为什么hooks的调用顺序不能变呢"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么hooks的调用顺序不能变呢"}},[t._v("#")]),t._v(" 为什么hooks的调用顺序不能变呢？")]),t._v(" "),e("p",[t._v("如果我们根据某些外部变量，或者组件自身的state，改变hooks的调用顺序，会有什么后果呢？")]),t._v(" "),e("p",[t._v("我们来演示下 "),e("strong",[t._v("错误的")]),t._v(" 做法：")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" firstRender "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("RenderFunctionComponent")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" initName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("firstRender"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("initName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("useState")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Rudi"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    firstRender "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("firstName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" setFirstName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("useState")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("initName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("lastName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" setLastName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("useState")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Yardley"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Button onClick"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setFirstName")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Fred"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("Fred"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("Button"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br")])]),e("p",[t._v("上面代码里，我们第一个 "),e("code",[t._v("useState")]),t._v(" 是在一个 条件分支里。我们来看看这样引入的bug。")]),t._v(" "),e("p",[e("strong",[t._v("1) 第一次render")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://pic3.zhimg.com/v2-9c9bc15e48b0de9c4c13e9829e2e4d36_r.jpg",alt:"img"}})]),t._v(" "),e("p",[t._v("第一个render之后，我们的两个state，"),e("code",[t._v("firstName")]),t._v(" 和 "),e("code",[t._v("lastName")]),t._v(" 都对应了正确的值。接下来看看组件第二次render的时候，会发生什么情况。")]),t._v(" "),e("p",[e("strong",[t._v("2) 第二次render")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://pic1.zhimg.com/v2-1562f2422b9c9f26e189472acbdf79f4_r.jpg",alt:"img"}})]),t._v(" "),e("p",[t._v("第二次render之后，我们的两个state， "),e("code",[t._v("firstName")]),t._v("和 "),e("code",[t._v("lastName")]),t._v(" 都成了 "),e("code",[t._v("Rudi")]),t._v("。这显然是错误的，必须要避免这样使用hooks！但是这也给我们演示了，hooks的调用顺序，为什么不能改变。")]),t._v(" "),e("p",[e("strong",[t._v("react团队明确强调了hooks的2个使用原则，如果不按照这些原则来使用hooks，将会导致数据的不一致性！")])]),t._v(" "),e("p",[e("strong",[t._v("将hooks的操作想象成数组的操作，你可能不太会违背这些原则")])]),t._v(" "),e("h1",{attrs:{id:"附-hook-api-索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#附-hook-api-索引"}},[t._v("#")]),t._v(" 附：Hook API 索引")]),t._v(" "),e("h3",{attrs:{id:"usestate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usestate"}},[t._v("#")]),t._v(" "),e("code",[t._v("useState")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const [state, setState] = useState(initialState);\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("如果新的 state 需要通过使用先前的 state 计算得出，那么可以将函数传递给 "),e("code",[t._v("setState")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("setState(prevCount => prevCount - 1)\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("如果初始 state 需要通过复杂计算获得，则可以传入一个函数，在函数中计算并返回初始的 state，此函数只在初始渲染时被调用：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const [state, setState] = useState(() => {\n  const initialState = someExpensiveComputation(props);\n  return initialState;\n});\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("h3",{attrs:{id:"useeffect"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#useeffect"}},[t._v("#")]),t._v(" "),e("code",[t._v("useEffect")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("useEffect(didUpdate);\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("在函数组件主体内（这里指在 React 渲染阶段）改变 DOM、添加订阅、设置定时器、记录日志以及执行其他包含副作用的操作都是不被允许的，因为这可能会产生莫名其妙的 bug 并破坏 UI 的一致性。")]),t._v(" "),e("p",[t._v("使用 "),e("code",[t._v("useEffect")]),t._v(" 完成副作用操作。赋值给 "),e("code",[t._v("useEffect")]),t._v(" 的函数会在组件渲染到屏幕之后执行。可以把 effect 看作从 React 的纯函数式世界通往命令式世界的逃生通道。")]),t._v(" "),e("p",[t._v("可以给 "),e("code",[t._v("useEffect")]),t._v(" 传递第二个参数，它是 effect 所依赖的值数组")]),t._v(" "),e("p",[t._v("虽然 "),e("code",[t._v("useEffect")]),t._v(" 会在浏览器绘制后延迟执行，但会保证在任何新的渲染前执行。React 将在组件更新前刷新上一轮渲染的 effect。")]),t._v(" "),e("h3",{attrs:{id:"usecontext"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usecontext"}},[t._v("#")]),t._v(" "),e("code",[t._v("useContext")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const value = useContext(MyContext);\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("接收一个 context 对象（"),e("code",[t._v("React.createContext")]),t._v(" 的返回值）并返回该 context 的当前值。当前的 context 值由上层组件中距离当前组件最近的 "),e("code",[t._v("<MyContext.Provider>")]),t._v(" 的 "),e("code",[t._v("value")]),t._v(" prop 决定。")]),t._v(" "),e("h3",{attrs:{id:"usereducer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usereducer"}},[t._v("#")]),t._v(" "),e("code",[t._v("useReducer")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const [state, dispatch] = useReducer(reducer, initialArg, init);\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[e("a",{attrs:{href:"https://react.docschina.org/docs/hooks-reference.html#usestate",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("useState")]),e("OutboundLink")],1),t._v(" 的替代方案。它接收一个形如 "),e("code",[t._v("(state, action) => newState")]),t._v(" 的 reducer，并返回当前的 state 以及与其配套的 "),e("code",[t._v("dispatch")]),t._v(" 方法。")]),t._v(" "),e("h3",{attrs:{id:"usecallback"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usecallback"}},[t._v("#")]),t._v(" "),e("code",[t._v("useCallback")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const memoizedCallback = useCallback(\n  () => {\n    doSomething(a, b);\n  },\n  [a, b],\n);\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br")])]),e("p",[t._v("把内联回调函数及依赖项数组作为参数传入 "),e("code",[t._v("useCallback")]),t._v("，它将返回该回调函数的 memoized 版本，该回调函数仅在某个依赖项改变时才会更新。当回调函数传递给经过优化的并使用引用相等性去避免非必要渲染（例如 "),e("code",[t._v("shouldComponentUpdate")]),t._v("）的子组件时，它将非常有用。")]),t._v(" "),e("p",[e("code",[t._v("useCallback(fn, deps)")]),t._v(" 相当于 "),e("code",[t._v("useMemo(() => fn, deps)")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"usememo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usememo"}},[t._v("#")]),t._v(" "),e("code",[t._v("useMemo")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("把“创建”函数和依赖项数组作为参数传入 "),e("code",[t._v("useMemo")]),t._v("，它仅会在某个依赖项改变时才重新计算 memoized 值。这种优化有助于避免在每次渲染时都进行高开销的计算。")]),t._v(" "),e("h3",{attrs:{id:"useref"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#useref"}},[t._v("#")]),t._v(" "),e("code",[t._v("useRef")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const refContainer = useRef(initialValue);\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[e("code",[t._v("useRef")]),t._v(" 返回一个可变的 ref 对象，其 "),e("code",[t._v(".current")]),t._v(" 属性被初始化为传入的参数（"),e("code",[t._v("initialValue")]),t._v("）。返回的 ref 对象在组件的整个生命周期内保持不变。")]),t._v(" "),e("p",[e("code",[t._v("useRef")]),t._v(" 就像是可以在其 "),e("code",[t._v(".current")]),t._v(" 属性中保存一个可变值的“盒子”。")]),t._v(" "),e("h3",{attrs:{id:"useimperativehandle"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#useimperativehandle"}},[t._v("#")]),t._v(" "),e("code",[t._v("useImperativeHandle")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("useImperativeHandle(ref, createHandle, [deps])\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[e("code",[t._v("useImperativeHandle")]),t._v(" 可以让你在使用 "),e("code",[t._v("ref")]),t._v(" 时自定义暴露给父组件的实例值。在大多数情况下，应当避免使用 ref 这样的命令式代码。"),e("code",[t._v("useImperativeHandle")]),t._v(" 应当与 "),e("a",{attrs:{href:"https://react.docschina.org/docs/react-api.html#reactforwardref",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("forwardRef")]),e("OutboundLink")],1),t._v(" 一起使用。")]),t._v(" "),e("h3",{attrs:{id:"uselayouteffect"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#uselayouteffect"}},[t._v("#")]),t._v(" "),e("code",[t._v("useLayoutEffect")])]),t._v(" "),e("p",[t._v("其函数签名与 "),e("code",[t._v("useEffect")]),t._v(" 相同，但它会在所有的 DOM 变更之后同步调用 effect。可以使用它来读取 DOM 布局并同步触发重渲染。在浏览器执行绘制之前，"),e("code",[t._v("useLayoutEffect")]),t._v(" 内部的更新计划将被同步刷新。")]),t._v(" "),e("h2",{attrs:{id:"优点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[t._v("#")]),t._v(" 优点")]),t._v(" "),e("h3",{attrs:{id:"一、复用性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、复用性"}},[t._v("#")]),t._v(" 一、复用性")]),t._v(" "),e("p",[t._v("比起类组件，代码可读性更强。比如复用代码时使用自定义hook代替复杂的高阶组件。")]),t._v(" "),e("h3",{attrs:{id:"二、没有this问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、没有this问题"}},[t._v("#")]),t._v(" 二、没有this问题")]),t._v(" "),e("p",[t._v("类组件中比较复杂时this指向可能让人头晕")]),t._v(" "),e("h2",{attrs:{id:"缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),e("h3",{attrs:{id:"一、响应式的useeffect"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、响应式的useeffect"}},[t._v("#")]),t._v(" 一、响应式的useEffect")]),t._v(" "),e("p",[t._v("有时候，你的useEffect依赖某个函数的不可变性，这个函数的不可变性又依赖于另一个函数的不可变性，这样便形成了一条依赖链。一旦这条依赖链的某个节点意外地被改变了，你的useEffect就被意外地触发了。")]),t._v(" "),e("h3",{attrs:{id:"二、状态不同步"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、状态不同步"}},[t._v("#")]),t._v(" 二、状态不同步")]),t._v(" "),e("p",[t._v("函数的运行是独立的，每个函数都有一份独立的作用域。函数的变量是保存在运行时的作用域里面，当我们有异步操作的时候，经常会碰到异步回调的变量引用是之前的，也就是旧的（这里也可以理解成闭包）。")]),t._v(" "),e("h3",{attrs:{id:"来源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#来源"}},[t._v("#")]),t._v(" 来源")]),t._v(" "),e("p",[t._v("["),e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/66923924",target:"_blank",rel:"noopener noreferrer"}},[t._v("译: React Hooks: 没有魔法，只是数组 - 知乎 (zhihu.com)"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://react.docschina.org/docs/hooks-reference.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Hook API 索引 – React (docschina.org)"),e("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=n.exports}}]);