(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{498:function(e,t,r){"use strict";r.r(t);var s=r(4),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h3",{attrs:{id:"跨域问题的来源"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#跨域问题的来源"}},[e._v("#")]),e._v(" 跨域问题的来源")]),e._v(" "),r("p",[e._v("1995年，出于浏览器安全方面的考虑（若一个网站可以加载并执行别的网站的脚本，随意下载别的网站的数据，会造成极大的安全风险），Netscape 公司在浏览器中引入了“同源策略”。同源的定义是：如果两个 URL 的 protocol、port (如果有指定的话)和 host都相同的话，则这两个 URL 是同源。\n同源策略控制不同源之间的交互，例如在使用"),r("code",[e._v("XMLHttpRequest")]),e._v(" 或 "),r("code",[e._v("<img>")]),e._v(" 标签时则会受到同源策略的约束。这些交互通常分为三类：")]),e._v(" "),r("ul",[r("li",[e._v("跨域写操作（Cross-origin writes）"),r("em",[e._v("一般是被允许的")]),e._v("。通常是资源跳转。例如a链接（links），重定向以及表单提交。")]),e._v(" "),r("li",[e._v("跨域资源嵌入（Cross-origin embedding）一般是被允许,如"),r("code",[e._v("<link>、<script>、<img>、<iframe>")]),e._v("等dom标签，还有样式中background:url()、@font-face()等文件外链")]),e._v(" "),r("li",[e._v("跨域读操作（Cross-origin reads）"),r("em",[e._v("一般是不被允许的")]),e._v("，即限制主动读取其他源的资源，但常可以通过内嵌资源来巧妙的进行读取访问。主要限制的行为是\n"),r("ul",[r("li",[e._v("Cookie、LocalStorage 和 IndexDB 无法读取。")]),e._v(" "),r("li",[e._v("DOM 和js无法获得。")]),e._v(" "),r("li",[e._v("AJAX请求不能发送。\n通常所说的跨域一般指最后一种，主要是脚本请求。")])])])]),e._v(" "),r("h3",{attrs:{id:"如何实现跨域"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如何实现跨域"}},[e._v("#")]),e._v(" 如何实现跨域")]),e._v(" "),r("p",[e._v("常见的跨域解决方案有")]),e._v(" "),r("h5",{attrs:{id:"通过jsonp跨域"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#通过jsonp跨域"}},[e._v("#")]),e._v(" 通过jsonp跨域")]),e._v(" "),r("p",[e._v("由于资源嵌入不受跨域限制，网页可以得到从其他来源动态产生的 JSON 数据。优点是简单兼容性好，可用于解决主流浏览器的跨域数据访问的问题。缺点是仅支持 GET 方法具有局限性，不安全可能会遭受XSS攻击。")]),e._v(" "),r("h5",{attrs:{id:"页面间跨域"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#页面间跨域"}},[e._v("#")]),e._v(" 页面间跨域")]),e._v(" "),r("p",[e._v("不是浏览器与服务端的跨域，而是不同页面间的跨域。包括 document.domain + iframe跨域、location.hash + iframe跨域、window.name + iframe跨域、 postMessage跨域等")]),e._v(" "),r("h5",{attrs:{id:"跨域资源共享-cors"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#跨域资源共享-cors"}},[e._v("#")]),e._v(" 跨域资源共享（CORS）")]),e._v(" "),r("p",[e._v('CORS 是一个 W3C 标准，全称是"跨域资源共享"(Cross Origin Resource Sharing)，它允许浏览器向跨源服务器，发出 XMLHttpRequest 请求，从而克服了只能发送同源请求的限制。')]),e._v(" "),r("p",[e._v("CORS有两种类型的请求，分别是：简单请求(simple request)和非简单请求(not-so-simple request)。CORS 规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法，即非简单请求，浏览器必须首先使用 OPTIONS 方法发起一个预检请求(preflight request)，从而获知服务端是否允许该跨域请求。服务端来设置允许哪些来源的请求，即服务端在接收到请求之后，对允许的请求源设置Access-Control-Allow-Origin 的响应头。")]),e._v(" "),r("p",[e._v("一般只需后端设置，前端无需设置；若要带cookie请求，前后端都需要设置。")]),e._v(" "),r("h5",{attrs:{id:"反向代理跨域"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#反向代理跨域"}},[e._v("#")]),e._v(" 反向代理跨域")]),e._v(" "),r("p",[e._v("同源策略是浏览器需要遵循的标准，而如果是服务器向服务器请求就无需遵循同源策略。代理服务器需要做以下几个步骤：")]),e._v(" "),r("p",[e._v("1.接受客户端的请求")]),e._v(" "),r("p",[e._v("2.将请求转发给实际的服务器")]),e._v(" "),r("p",[e._v("3.将服务器的响应结果返回给客户端")]),e._v(" "),r("p",[e._v("常见的反向代理服务器是nginx或nodejs中间件")]),e._v(" "),r("h5",{attrs:{id:"websocket协议跨域"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#websocket协议跨域"}},[e._v("#")]),e._v(" WebSocket协议跨域")]),e._v(" "),r("p",[e._v("WebSocket protocol是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是server push技术的一种很好的实现。")]),e._v(" "),r("h3",{attrs:{id:"参考"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[e._v("#")]),e._v(" 参考")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/145837536",target:"_blank",rel:"noopener noreferrer"}},[e._v("你还不知道跨域问题是怎样造成的吗？ - 知乎 (zhihu.com)"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy",target:"_blank",rel:"noopener noreferrer"}},[e._v("浏览器的同源策略 - Web 安全 | MDN (mozilla.org)"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"https://www.cnblogs.com/sdcs/p/8484905.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("前端解决跨域的九种方法 - 孙氏楼 - 博客园 (cnblogs.com)"),r("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=a.exports}}]);